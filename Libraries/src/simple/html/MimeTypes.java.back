package simple.HTML;

import java.util.Vector;
import java.io.*;
import java.net.*;

import simple.xml.XMLDoc;

/**
 * This class reads a simple XML file containing MIME Type information and
 * provides this information staticly.<br>
 * File read: mimeTypes.conf.xml<br>
 * Created: Jul 25, 2006
 * @author Kenneth Pierce
 */
public final class MimeTypes {
	private static final Vector<MimeType> video = new Vector<MimeType>();
	private static final Vector<MimeType> audio = new Vector<MimeType>();
	private static final Vector<MimeType> image = new Vector<MimeType>();
	private static final Vector<MimeType> other = new Vector<MimeType>();
	private static boolean loaded = false;
	static {
		System.out.println("Loading MimeTypes...");
		if (!loaded) {
			loaded = loadTypes();
		}
		System.out.println("MimeTypes Loaded");
	}
	public MimeTypes() {
		if (!loaded)
			loaded = loadTypes();
	}
	public static String getMimeType(URL e) throws IOException {
		HttpURLConnection con = (HttpURLConnection)e.openConnection();
		String type;
		con.setRequestMethod("HEAD");
		con.connect();
		type = con.getContentType();
		con.disconnect();
		return type;
	}
	public static String getMimeType(URL e, String referer) throws IOException {
		HttpURLConnection con = (HttpURLConnection)e.openConnection();
		String type;
		con.setRequestProperty("Referer", referer);
		con.setRequestMethod("HEAD");
		con.connect();
		type = con.getContentType();
		con.disconnect();
		return type;
	}
	protected static boolean loadTypes() {
		try {
			XMLDoc mime = new XMLDoc(MimeTypes.class.getClassLoader().getResource("mimeTypes.conf.xml"));
			//simple.debug.mes(MimeTypes.class.getClassLoader().getResource("mimeTypes.conf.xml").toExternalForm(), "");
			loaded = true;
			mime.parse();
			//mime.print();
			//*
			for (int i = 0;i<mime.getSubNum("video",0); i++) {
				video.addElement(new MimeType(mime.getParam("video;0/type;"+i, "mime").toLowerCase(), mime.getParam("video;0/type;"+i, "ext").toLowerCase().split(" ")));
			}
			for (int i = 0;i<mime.getSubNum("audio",0); i++) {
				audio.addElement(new MimeType(mime.getParam("audio;0/type;"+i, "mime").toLowerCase(), mime.getParam("audio;0/type;"+i, "ext").toLowerCase().split(" ")));
			}
			for (int i = 0;i<mime.getSubNum("image",0); i++) {
				image.addElement(new MimeType(mime.getParam("image;0/type;"+i, "mime").toLowerCase(), mime.getParam("image;0/type;"+i, "ext").toLowerCase().split(" ")));
			}
			for (int i = 0;i<mime.getSubNum("other",0); i++) {
				other.addElement(new MimeType(mime.getParam("other;0/type;"+i, "mime").toLowerCase(), mime.getParam("other;0/type;"+i, "ext").toLowerCase().split(" ")));
			}//*/
			video.trimToSize();
			audio.trimToSize();
			image.trimToSize();
			other.trimToSize();
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
	private static boolean contains(final Vector<MimeType> vec, String mime) {
		for (MimeType cur : vec) {
			if (cur.getMimeType().equals(mime))
				return true;
		}
		return false;
	}
	public static boolean isMimeVideo(String mime) {
		if (mime==null) return false;
		if (mime.startsWith("video"))
			return true;
		else
			return contains(video, mime);
	}
	public static boolean isMimeAudio(String mime) {
		if (mime==null) return false;
		if (mime.startsWith("audio"))
			return true;
		else
			return contains(audio, mime);
	}
	public static boolean isMimeImage(String mime) {
		if (mime==null) return false;
		if (mime.startsWith("image"))
			return true;
		else
			return contains(image, mime);
	}
	public static boolean isMimeOther(String mime) {
		if (mime==null) return false;
		if (mime.startsWith("application") || mime.startsWith("text") ||
				mime.startsWith("drawing") || mime.startsWith("model"))
			return true;
		else
			return contains(other, mime);
	}
	private static String getExt(Vector<MimeType> vec, String mime) {
		for (MimeType cur : vec) {
			if (cur.getMimeType().equals(mime)) {
				return cur.getExt(0);
			}
		}
		return null;
	}
	public static String getExt(String mime) {
		String ext = null;
		ext = getExt(image, mime);
		if (ext!=null) 
			return ext;
		ext = getExt(video, mime);
		if (ext!=null) 
			return ext;
		ext = getExt(audio, mime);
		if (ext!=null) 
			return ext;
		ext = getExt(other, mime);
		if (ext!=null) 
			return ext;
		return "";
	}
	private static String getMime(final Vector<MimeType> vec, String ext) {
		for (MimeType cur : vec) {
			if (cur.isMimeType(ext)) {
				return cur.getMimeType();
			}
		}
		return null;
	}
	public static String getMime(String ext) {
		String mime = null;
		mime = getMime(video, ext);
		if (mime!=null) return mime;
		mime = getMime(audio, ext);
		if (mime!=null) return mime;
		mime = getMime(image, ext);
		if (mime!=null) return mime;
		mime = getMime(other, ext);
		return mime;
	}
	public static void main(String[] args) {
		new MimeTypes();
	}
	public static class MimeType {
		private final Vector<String> exts = new Vector<String>();
		private final String mime;
		public MimeType(String mime, String[] ext) {
			this.mime = mime;
			for (int i =0; i<ext.length; i++) {
				exts.addElement(ext[i]);
			}
			exts.trimToSize();
		}
		public String getMimeType() {
			return mime;
		}
		public boolean isMimeType(String ext) {
			return exts.contains(ext);
		}
		public String getExt(int index) {
			return exts.get(index);
		}
	}
}
