package simple.sql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * Wraps a java.sql.Statement and makes
 */
public class ChainableStatement implements AutoCloseable{
	protected final Statement obj;
	public ChainableStatement(Statement wrap) {
		obj= wrap;
	}
	public Statement getStatement() {
		return obj;
	}

	public ChainableStatement addBatch(String stm) throws SQLException{
		obj.addBatch(stm);
		return this;
	}

	public void cancel() throws SQLException{
		obj.cancel();
	}

	public ChainableStatement clearBatch() throws SQLException{
		obj.clearBatch();
		return this;
	}

	public ChainableStatement clearWarnings() throws SQLException{
		obj.clearWarnings();
		return this;
	}

	@Override
	public void close() throws SQLException{
		obj.close();
	}

	public void closeOnCompletion() throws SQLException{
		obj.closeOnCompletion();
	}

	public boolean execute(String stm) throws SQLException{
		return obj.execute(stm);
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException{
		return obj.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException{
		return obj.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException{
		return obj.execute(sql, columnNames);
	}

	public int[] executeBatch() throws SQLException{
		return obj.executeBatch();
	}

	public ResultSet executeQuery(String query) throws SQLException{
		return obj.executeQuery(query);
	}

	public int executeUpdate(String query) throws SQLException{
		return obj.executeUpdate(query);
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException{
		return obj.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException{
		return obj.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException{
		return obj.executeUpdate(sql, columnNames);
	}

	public Connection getConnection() throws SQLException{
		return obj.getConnection();
	}

	public int getFetchDirection() throws SQLException{
		return obj.getFetchDirection();
	}

	public int getFetchSize() throws SQLException{
		return obj.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException{
		return obj.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException{
		return obj.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException{
		return obj.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException{
		return obj.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException{
		return obj.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException{
		return obj.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException{
		return obj.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException{
		return obj.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException{
		return obj.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException{
		return obj.getResultSetType();
	}

	public int getUpdateCount() throws SQLException{
		return obj.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException{
		return obj.getWarnings();
	}

	public boolean isCloseOnCompletion() throws SQLException{
		return obj.isCloseOnCompletion();
	}

	public boolean isClosed() throws SQLException{
		return obj.isClosed();
	}

	public boolean isPoolable() throws SQLException{
		return obj.isPoolable();
	}

	public ChainableStatement setCursorName(String name) throws SQLException{
		obj.setCursorName(name);
		return this;
	}

	public ChainableStatement setEscapeProcessing(boolean enable) throws SQLException{
		obj.setEscapeProcessing(enable);
		return this;
	}

	public ChainableStatement setFetchDirection(int direction) throws SQLException{
		obj.setFetchDirection(direction);
		return this;
	}

	public ChainableStatement setFetchSize(int rows) throws SQLException{
		obj.setFetchSize(rows);
		return this;
	}

	public ChainableStatement setMaxFieldSize(int max) throws SQLException{
		obj.setMaxFieldSize(max);
		return this;
	}

	public ChainableStatement setMaxRows(int max) throws SQLException{
		obj.setMaxRows(max);
		return this;
	}

	public ChainableStatement setPoolable(boolean enable) throws SQLException{
		obj.setPoolable(enable);
		return this;
	}

	public ChainableStatement setQueryTimeout(int seconds) throws SQLException{
		obj.setQueryTimeout(seconds);
		return this;
	}
}
